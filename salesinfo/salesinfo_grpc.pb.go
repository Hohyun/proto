// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: salesinfo.proto

package salesinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesInfoClient is the client API for SalesInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesInfoClient interface {
	GetSalesInfo(ctx context.Context, in *SalesInfoRequest, opts ...grpc.CallOption) (*SalesInfoResponse, error)
}

type salesInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesInfoClient(cc grpc.ClientConnInterface) SalesInfoClient {
	return &salesInfoClient{cc}
}

func (c *salesInfoClient) GetSalesInfo(ctx context.Context, in *SalesInfoRequest, opts ...grpc.CallOption) (*SalesInfoResponse, error) {
	out := new(SalesInfoResponse)
	err := c.cc.Invoke(ctx, "/salesinfo.SalesInfo/GetSalesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesInfoServer is the server API for SalesInfo service.
// All implementations must embed UnimplementedSalesInfoServer
// for forward compatibility
type SalesInfoServer interface {
	GetSalesInfo(context.Context, *SalesInfoRequest) (*SalesInfoResponse, error)
	mustEmbedUnimplementedSalesInfoServer()
}

// UnimplementedSalesInfoServer must be embedded to have forward compatible implementations.
type UnimplementedSalesInfoServer struct {
}

func (UnimplementedSalesInfoServer) GetSalesInfo(context.Context, *SalesInfoRequest) (*SalesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesInfo not implemented")
}
func (UnimplementedSalesInfoServer) mustEmbedUnimplementedSalesInfoServer() {}

// UnsafeSalesInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesInfoServer will
// result in compilation errors.
type UnsafeSalesInfoServer interface {
	mustEmbedUnimplementedSalesInfoServer()
}

func RegisterSalesInfoServer(s grpc.ServiceRegistrar, srv SalesInfoServer) {
	s.RegisterService(&SalesInfo_ServiceDesc, srv)
}

func _SalesInfo_GetSalesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesInfoServer).GetSalesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesinfo.SalesInfo/GetSalesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesInfoServer).GetSalesInfo(ctx, req.(*SalesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalesInfo_ServiceDesc is the grpc.ServiceDesc for SalesInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "salesinfo.SalesInfo",
	HandlerType: (*SalesInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalesInfo",
			Handler:    _SalesInfo_GetSalesInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "salesinfo.proto",
}
